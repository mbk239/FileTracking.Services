
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/Layout.cshtml";
}

<script type="text/javascript" src="/lib/jquery/dist/jquery.js"></script>
<h1>WebSocket Application</h1>
<p id="stateLabel">Ready to connect...</p>
<div>
    <label for="username">UserName:</label>
    <input id="username" value="loguser" />
    <label for="password">    Password:</label>
    <input id="password" value="Password" />
    <label for="password">    Token:</label>
    <input id="token" value="loguser~!#$%^&*()_+" />
</div>
<p></p>
<div>
    <label for="connectionUrl">WebSocket Server URL:</label>
    <input id="connectionUrl" />
    <button id="connectButton" type="submit">Connect</button>
    <button id="closeButton" disabled>Close Socket</button>
</div>
<p></p>
<div>
    <label for="sendMessage">Message to send:</label>
    <input id="sendMessage" disabled value="hello every body" />
</div>
<p></p>
<div>
        <select multiple="multiple" id="userList" size="5" style="width: 500px;"></select>
    <p></p>
        <button id="refreshuserButton" disabled>Refresh User</button>
    </div>
    <p></p>
    <div>

        <button id="sendButton" type="submit" disabled>Send</button>
        <button id="sendMessageToListUser" disabled>Send Message to all users</button>
    </div>
    <h2>Communication Log</h2>
    <table style="width: 100%">
        <thead>
            <tr style="vertical-align:top;">
                <td style="width:30%">
                    <button id="clearTextArea" onclick="clearLog();">Clear TextArea</button><p></p>
                    <label for="textLog">All Server Message:</label><br />
                    <textarea rows="15" cols="100" style="width:100%" id="textLog"></textarea>
                </td>
                <td style="margin-left:20px;">
                    <table style="width:100%">
                        <thead>
                            <tr>
                                <td style="width: 100px">From</td>
                                <td style="width: 100px">Mesage Type</td>
                                <td style="width: 300px">Data</td>
                            </tr>
                        </thead>
                        <tbody id="commsLog"></tbody>
                    </table>
                </td>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
    <script>
        var connectionForm = document.getElementById("connectionForm");
        var connectionUrl = document.getElementById("connectionUrl");
        var username = document.getElementById("username");
        var password = document.getElementById("password");
        var password = document.getElementById("token");
        var connectButton = document.getElementById("connectButton");
        var stateLabel = document.getElementById("stateLabel");
    var refreshuserButton = document.getElementById("refreshuserButton");
        var sendMessage = document.getElementById("sendMessage");
        var sendButton = document.getElementById("sendButton");
        var sendMessageToListUser = document.getElementById("sendMessageToListUser");
        var sendForm = document.getElementById("sendForm");
        var commsLog = document.getElementById("commsLog");
        var textLog = document.getElementById("textLog");
        var socket;

        var scheme = document.location.protocol == "https:" ? "wss" : "ws";
        var port = document.location.port ? (":" + document.location.port) : "";
        connectionUrl.value = scheme + "://" + document.location.hostname + port;

        var messageToSend = {
            'MessageType': "",
            'Value': ""
        };

        function clearLog() {
            textLog.value = '';
            commsLog.innerHTML = "";
        }

        function updateState() {
            function disable() {
                sendMessage.disabled = true;
                sendButton.disabled = true;
                refreshuserButton.disabled = true;
                closeButton.disabled = true;
                sendMessageToListUser.disabled = true;
            }
            function enable() {
                sendMessage.disabled = false;
                sendButton.disabled = false;
                refreshuserButton.disabled = false;
                closeButton.disabled = false;
                sendMessageToListUser.disabled = false;
            }

            connectionUrl.disabled = true;
            connectButton.disabled = true;
            username.disabled = true;

            if (!socket) {
                disable();
            } else {
                switch (socket.readyState) {
                    case WebSocket.CLOSED:
                        stateLabel.innerHTML = "Closed";
                        disable();
                        connectionUrl.disabled = false;
                        connectButton.disabled = false;
                        username.disabled = false;
                        break;
                    case WebSocket.CLOSING:
                        stateLabel.innerHTML = "Closing...";
                        disable();
                        break;
                    case WebSocket.CONNECTING:
                        stateLabel.innerHTML = "Connecting...";
                        disable();
                        break;
                    case WebSocket.OPEN:
                        stateLabel.innerHTML = "Open";
                        enable();
                        break;
                    default:
                        stateLabel.innerHTML = "Unknown WebSocket State: " + socket.readyState;
                        disable();
                        break;
                }
            }
        }

        closeButton.onclick = function () {
            if (!socket || socket.readyState != WebSocket.OPEN) {
                alert("socket not connected");
            }
            socket.close(1000, "Closing from client");
        }

        refreshuserButton.onclick = function () {
            if (!socket || socket.readyState != WebSocket.OPEN) {
                alert("socket not connected");
            }
            messageToSend.MessageType = "getconcurrentusers";
            messageToSend.Value = '';
            //messageToSend.Value = "TaoTemplate,treeFile1368," + JSON.stringify(data);
            socket.send(JSON.stringify(messageToSend));
        }

        sendButton.onclick = function () {
            if (!socket || socket.readyState != WebSocket.OPEN) {
                alert("socket not connected");
            }
            var selectedValues = $('#userList').val();
            if ((selectedValues != null) && (selectedValues.length > 0)){
                var objMessage = //{Username: "", FullName: "", Message: "TaoThuMucMoi,1657,1368,ddddd", ToList: []};
                    {
                        'Username': '',
                        'FullName': '',
                        'Message': sendMessage.value,
                        'ToList': selectedValues
                        //'ToList': ['User01', 'User03', 'ClientApp']
                    };
                messageToSend.MessageType = "apicommand";
                messageToSend.Value = JSON.stringify(objMessage)

                socket.send(JSON.stringify(messageToSend));

                commsLog.innerHTML += '<tr>' +
                    '<td class="commslog-client">Me</td>' +
                    '<td class="commslog-server">send message</td>' +
                    '<td class="commslog-data">' + sendMessage.value + '</td>'
                    '</tr>';
            }
            else{
                alert("Please select atleast an user!");
            }
        }

        sendMessageToListUser.onclick = function () {
            if (!socket || socket.readyState != WebSocket.OPEN) {
                alert("socket not connected");
            }
            var objMessage = //{Username: "", FullName: "", Message: "TaoThuMucMoi,1657,1368,ddddd", ToList: []};
                {
                    'Username': '',
                    'FullName': '',
                    'Message': sendMessage.value,
                    'ToList': []
                    //'ToList': ['User01', 'User03', 'ClientApp']
                };
            messageToSend.MessageType = "apicommand";
            messageToSend.Value = JSON.stringify(objMessage)

            socket.send(JSON.stringify(messageToSend));
            commsLog.innerHTML += '<tr>' +
                '<td class="commslog-client">Me</td>' +
                '<td class="commslog-server">send message</td>' +
                '<td class="commslog-data">' + sendMessage.value + '</td>'
            '</tr>';
        }
        connectButton.onclick = connectWS;

        function connectWS() {
            stateLabel.innerHTML = "Connecting";
            socket = new WebSocket(connectionUrl.value);
            socket.onopen = function (event) {
                updateState();
                commsLog.innerHTML += '<tr>' +
                    '<td colspan="3" class="commslog-data">Connection opened</td>' +
                    '</tr>';
                if (socket && socket.readyState == WebSocket.OPEN) {
                    var sToken = 'loguser~!#$%^&*()_+';
                    if ((token.value != null) && (token.value != ''))
                    {
                        sToken = token.value;
                    }
                    var userinfor = {
                        'Username': username.value,
                        'Password': '',
                        'FullName': username.value,
                        'token': sToken
                    };
                    messageToSend.MessageType = "login";
                    messageToSend.Value = JSON.stringify(userinfor);
                    //var data = '{"MessageType":"login", "Value":"' + '{"Username":"' + username.value + '","Password":"' + password.value + '"}' + '"}';
                    console.log(JSON.stringify(messageToSend));
                    socket.send(JSON.stringify(messageToSend));
                }
            };
            socket.onclose = function (event) {
                updateState();
                commsLog.innerHTML += '<tr>' +
                    '<td colspan="3" class="commslog-data">Connection closed. Code: ' + event.code + '. Reason: ' + event.reason + '</td>' +
                    '</tr>';
            };
            socket.onerror = updateState;
            socket.onmessage = function (event) {
                var revmessage = JSON.parse(event.data);
                if (revmessage.MessageType == "fileaction") {
                    var actioninfor = JSON.parse(revmessage.Value);
                    commsLog.innerHTML += '<tr>' +
                        '<td class="commslog-server">' + actioninfor.UserName + '</td>' +
                        '<td class="commslog-client">' + revmessage.MessageType + '</td>' +
                        '<td class="commslog-data">File Action: ' + actioninfor.Action + '</br>File path: ' + actioninfor.FilePath + '</br>File name: ' + actioninfor.FileName + '</td>'
                    '</tr>';
                }
                else if (revmessage.MessageType == "message") {
                    var messageinfor = JSON.parse(revmessage.Value);
                    if (messageinfor.UserName != 'Server log') {
                        commsLog.innerHTML += '<tr>' +
                            '<td class="commslog-server">' + messageinfor.UserName + '</td>' +
                            '<td class="commslog-client">' + revmessage.MessageType + '</td>' +
                            '<td class="commslog-data">' + messageinfor.Message + '</td>'
                        '</tr>';
                    }
                    else {
                        textLog.value = messageinfor.Message + "\r\n\r\n\r\n" + textLog.value;
                    }
                }
                else if (revmessage.MessageType == "getconcurrentusers") {
                    var messageinfor = JSON.parse(revmessage.Value);
                    if (messageinfor.length > 0){
                        var shtml = '';
                        for(var i=0;i<messageinfor.length;i++){
                            shtml += '<option value="'+ messageinfor[i].Username + '">' + messageinfor[i].FullName + ' (' +messageinfor[i].Username + '   --   ' + messageinfor[i].token + ')</option>';
                        }
                        $('#userList').html(shtml);
                    }
                }
            };
        };

        connectWS();
    </script>


